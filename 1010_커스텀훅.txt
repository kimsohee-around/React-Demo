리액트 훅의 목표
: 코드의 간소화, 캡슐화, 재사용성, 유지보수성
: 함수 컴포넌트가 훅을 이용하여 마운트, 렌더링, 언마운트와 같은 생명 주기 이벤트에 끼어들게 해준다.

커스텀 훅
: 반복되는 특정 기능 수행 코드를 분리해서 사용자 함수를 만드는 것처럼
컴포넌트 코드 중 훅을 포함하는 특정 기능의 코드를 재사용할 수 있게 분리할 수 있다.
: 중복된 기능을 커스텀 훅으로 만들기
 -1) 공유할 수 있는 기능 찾기
 -2) 컴포넌트 외부에서 커스텀 훅 정의하기 - 이름은 useXXXX , 즉 use 로 시작 하는 것이 일반적
 -3) 커스텀 훅 호출하기

훅 규칙
  (훅 호출 순서가 렌더링마다 변경되지 않고 일관성을 갖도록 하는 목적)
: 훅을 호출할 때 조건,반복,중첩된 함수안에서 호출하지 않는다.
: 리액트 함수 컴포넌트 또는 커스텀 훅 안에서 훅을 호출한다.일반적인 자바스크립트 안에서 호출하지 않는다.

커스텀 훅 예제
: 데이터 읽어오기 useFetch
: BookingsGrid 에 있는 useEffect 형식으로 캡슐화
  ㄴ 변수명은  bookable 대신에 data , loading 대신에 status(다양한 상태저장)
  ㄴ BookableList, UserPicker , UserList 를 커스텀훅으로 리팩토링
  ㄴ BookingsGrid 는 매번 다른 값의 쿼리스트링을 포함하므로 별도로 만들어야 함.


==== 참고====
ESLint 플러그인 : 이러한 규칙 적용을 체크해준다.
eslint-plugin-react-hooks

로컬스토리지 사용 커스텀 훅 https://codesandbox.io/p/sandbox/uselocalstorage-zkl7
useUser 예제 : 0901-context-hook 브랜치